#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015  Karsten Kretschmer <kkretsch@apc.univ-paris7.fr>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
"""
Select science windows that are well predicted by background tracers and
that have only weak sources. Add them up for background cube production.
"""

import os
import numpy as np
try:
    from astropy.io import fits
except ImportError:
    import pyfits as fits

from integral.isgri import bgcube

# Prefer prefixed paths when available for higher read performance
#
for attr in ('throng_dir', 'byscw_dir'):
    for prefix in (os.path.join('/tmp', os.environ['USER']), None):
        path = getattr(bgcube.cube, attr)
        if prefix:
            path_new = os.path.join(prefix, os.path.relpath(path, '/'))
            if os.path.isdir(path_new):
                setattr(bgcube.cube, attr, path_new)
            break

print('Loading from:')
print(bgcube.cube.throng_dir)
print(bgcube.cube.byscw_dir)

srcsig_pre = np.loadtxt('srcsig-predictable.log', usecols=(0,1))
sig_max = 25.0

idx_lowsrc = srcsig_pre[:, 1] <= sig_max
scw_lowsrc = srcsig_pre[idx_lowsrc, 0]

bgb = bgcube.BackgroundBuilder(scw_lowsrc)
bgb.setref(bgcube.BGCube('/Integral/data/ic/ibis/bkg/isgr_back_bkg_0010.fits'))
bgb.sigma_max = 3.5
bgcubes = bgb.read_cubes(n_max=400)

for i, bc in enumerate(bgcubes):
    hdu_pri = fits.PrimaryHDU()
    hdu_cts = fits.ImageHDU(np.ma.filled(bc.counts, 0))
    hdu_cts.header['EXTNAME'] = 'COUNTS'
    hdu_eff = fits.ImageHDU(np.ma.filled(bc.efficiency, -1))
    hdu_eff.header['EXTNAME'] = 'EXPOSURE'
    for hdu in [hdu_cts, hdu_eff]:
        for keyword in ['duration', 'n_scw', 'ontime',
                        'tmean', 'tstart', 'tstop']:
            hdu.header[keyword] = getattr(bc, keyword)
    fitsfile = 'bgcube{0:04d}.fits'.format(i)
    hdulist = fits.HDUList([hdu_pri, hdu_cts, hdu_eff])
    hdulist.writeto(fitsfile, clobber=True)
